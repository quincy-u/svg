# @package _global_
env_name: needle_handover
task_name: Isaac-Needle-DualArmPSM-v0

num_envs: 1
num_train_steps: 1e7
eval_freq: 25000
replay_buffer_capacity: 1e6
normalize_obs: false
delete_replay_at_end: false

learn_temp:
  init_targ_entr: -10
  final_targ_entr: -10
  entr_decay_factor: 1.0

agent:
  horizon: 0
  warmup_steps: 10000

## Device config
#  'physx' or 'flex'
physics_engine: 'physx'
# whether to use cpu or gpu pipeline
pipeline: 'gpu'
# device for running physics simulation
sim_device: 'cuda:0'
# device to run RL
device: 'cuda:0'
rl_device: ${device}
graphics_device_id: 0

## PhysX arguments
num_threads: 4 # Number of worker threads per scene used by PhysX - for CPU PhysX only.
solver_type: 1 # 0: pgs, 1: tgs
num_subscenes: 4 # Splits the simulation into N physics scenes and runs each one in a separate thread

# RLGames Arguments
# test - if set, run policy in inference mode (requires setting checkpoint to load)
test: False
# used to set checkpoint path
checkpoint: ''
# set to True to use multi-gpu horovod training
multi_gpu: False

wandb_activate: True
wandb_group: ''
wandb_name: ${env_name}
wandb_entity: 'krshna'
wandb_project: 'isaacgymenvs'
capture_video: False
capture_video_freq: 1464
capture_video_len: 100
force_render: True

# disables rendering
headless: true

# set the directory where the output files get saved
hydra:
  output_subdir: null
  run:
    dir: .

# if given, will override the device setting in gym.
task:
  name: ${task_name}
  env:
    numEnvs: ${num_envs}
    envSpacing: 0.75
    episodeLength: 600
    enableDebugVis: False
    aggregateMode: 1

    clipObservations: 5.0
    clipActions: 1.0

    stiffnessScale: 1.0
    forceLimitScale: 1.0

    useRelativeControl: False
    dofSpeedScale: 20.0
    actionsMovingAverage: 1.0
    controlFrequencyInv: 2 # 30 Hz

    startPositionNoise: 0.01
    startRotationNoise: 0.0

    resetPositionNoise: 0.01
    resetRotationNoise: 0.0
    resetDofPosRandomInterval: 0.2
    resetDofVelRandomInterval: 0.0

    # Random forces applied to the object
    forceScale: 0.0
    forceProbRange: [0.001, 0.1]
    forceDecay: 0.99
    forceDecayInterval: 0.08

    # reward -> dictionary
    distRewardScale: 0.1
    taskRewardScale: 1.0
    rotEps: 0.1
    actionPenaltyScale: -0.0002
    reachGoalBonus: 250
    fallDistance: 0.6
    fallPenalty: -50.0

    objectType: "dispenser" # can be block, egg or pen
    objectDofName: "joint_0"
    objectDofTargetPos: 0.015  # 0.05 for spray_bottle
    observationType: "full_state" # can be "no_vel", "full_state", "full"
    asymmetric_observations: False
    successTolerance: 0.005
    printNumSuccesses: False
    maxConsecutiveSuccesses: 3

    asset:
      assetFileName: "urdf/kuka_allegro_description/allegro_grasp.urdf"
      assetFileNameBlock: "urdf/objects/cube_multicolor_allegro.urdf"
      assetFileNameEgg: "mjcf/open_ai_assets/hand/egg.xml"
      assetFileNamePen: "mjcf/open_ai_assets/hand/pen.xml"
      assetFileNameBottle: "urdf/objects/bottle/mobility.urdf"
      assetFileNamePillBottle: "urdf/objects/pill_bottle/mobility.urdf"
      assetFileNameSprayBottle: "urdf/objects/spray_bottle/mobility.urdf"
      assetFileNameDispenser: "urdf/objects/dispenser/mobility.urdf"

  randomize: False
  randomization_params:
    frequency: 720   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      range_correlated: [0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [0., .05]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    sim_params:
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        # schedule_steps: 40000
    actor_params:
      hand:
        color: True
        dof_properties:
          damping:
            range: [0.3, 3.0]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          stiffness:
            range: [0.75, 1.5]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_body_properties:
          mass:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
      object:
        scale:
          range: [0.95, 1.05]
          operation: "scaling"
          distribution: "uniform"
          setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
          # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
          # schedule_steps: 30000
        rigid_body_properties:
          mass:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

  physics_engine: 'physx'

  sim:
    dt: 0.01667 # 1/60
    substeps: 4
    up_axis: "z"
    use_gpu_pipeline: true
    gravity: [0.0, 0.0, -9.81]
    physx:
      num_threads: 4
      solver_type: 1
      use_gpu: true # set to False to run on CPU
      num_position_iterations: 8
      num_velocity_iterations: 0
      max_gpu_contact_pairs: 8388608 # 8*1024*1024
      num_subscenes: 4
      contact_offset: 0.002
      rest_offset: 0.0
      bounce_threshold_velocity: 0.2
      max_depenetration_velocity: 1000.0
      default_buffer_size_multiplier: 5.0
      contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)
